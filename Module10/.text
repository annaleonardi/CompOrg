
bal main

.equ MAX_N, 100  // Maximum value of 'n' (change as needed)

main:
    SUB sp, sp, #12  // Allocate space on the stack
    STR lr, [sp, #4]  // Save the return address

    MOV r4, #3  // Initialize r4 to start from 3
    LDR r5, =MAX_N  // Load the maximum value of 'n' (change as needed)
    MOV r6, #2  // Initialize r6 to start dividing from 2

primeLoop:
    CMP r4, r5  // Compare r4 (current number) with r5 (maximum 'n')
    BGT endProgram  // If r4 > r5, exit the program

    MOV r7, #0  // Initialize r7 to store the remainder

    divideLoop:
        CMP r6, r4, LSR #1  // Compare r6 with r4/2
        BGT isPrime  // If r6 > r4/2, it's prime, so proceed to isPrime

        SDIV r8, r4, r6  // Divide r4 by r6 and store the result in r8
        MUL r9, r8, r6  // Multiply r8 by r6 and store the result in r9
        SUB r7, r4, r9  // Calculate the remainder and store it in r7

        CMP r7, #0  // Compare the remainder with 0
        BEQ notPrime  // If remainder is 0, the number is not prime

        ADD r6, r6, #1  // Increment r6 for the next division
        B divideLoop  // Repeat the division

:x
    isPrime:
        // Print the prime number
        LDR r0, =output
        MOV r1, r4
        BL printf

    notPrime:
        ADD r4, r4, #2  // Increment r4 by 2 to check the next odd number
        MOV r6, #2  // Reset r6 to 2 for the next number
        B primeLoop  // Repeat the prime check

endProgram:
    LDR lr, [sp, #4]  // Restore the return address
    ADD sp, sp, #12  // Deallocate the stack space
    MOV pc, lr  // Return from the program

.data
output: .asciz "%d, "  // Format for printing prime numbers


